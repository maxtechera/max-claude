#!/usr/bin/env bash
# Pattern Extraction Hook for Solo-Claude v4
# Captures and learns from user behavior patterns

# Configuration
PATTERN_DB="${HOME}/.claude/behavior_patterns.json"
PATTERN_CACHE="${HOME}/.claude/pattern_cache"

# Initialize pattern database if it doesn't exist
init_pattern_db() {
    if [[ ! -f "$PATTERN_DB" ]]; then
        mkdir -p "$(dirname "$PATTERN_DB")"
        echo '{"patterns": [], "frequency": {}, "sequences": []}' > "$PATTERN_DB"
    fi
}

# Extract patterns from command/action
extract_patterns() {
    local action="$1"
    local context="$2"
    local timestamp=$(date +"%s")
    
    # Pattern types to extract
    local command_pattern=""
    local time_pattern=""
    local sequence_pattern=""
    
    # Extract command pattern (e.g., /ticket, git commit, etc.)
    if echo "$action" | grep -qE "^/[a-z]+"; then
        command_pattern=$(echo "$action" | grep -oE "^/[a-z]+")
    elif echo "$action" | grep -qE "^(git|npm|cargo|python)"; then
        command_pattern=$(echo "$action" | awk '{print $1 " " $2}')
    fi
    
    # Extract time pattern
    local hour=$(date +"%H")
    local day=$(date +"%A")
    time_pattern="${day}_${hour}h"
    
    # Create pattern entry
    local pattern_entry=$(jq -n \
        --arg cmd "$command_pattern" \
        --arg time "$time_pattern" \
        --arg ctx "$context" \
        --arg ts "$timestamp" \
        --arg act "$action" \
        '{
            command: $cmd,
            time_pattern: $time,
            context: $ctx,
            timestamp: $ts,
            action: $act
        }')
    
    echo "$pattern_entry"
}

# Update pattern frequency
update_frequency() {
    local pattern_type="$1"
    local pattern_value="$2"
    
    # Update frequency count in JSON database
    jq --arg type "$pattern_type" --arg value "$pattern_value" \
        '.frequency[$type][$value] = ((.frequency[$type][$value] // 0) + 1)' \
        "$PATTERN_DB" > "${PATTERN_DB}.tmp" && mv "${PATTERN_DB}.tmp" "$PATTERN_DB"
}

# Detect sequence patterns
detect_sequence() {
    local current_action="$1"
    
    # Get last 5 actions from cache
    if [[ -f "$PATTERN_CACHE/last_actions.txt" ]]; then
        tail -n 4 "$PATTERN_CACHE/last_actions.txt" > "$PATTERN_CACHE/last_actions.tmp"
        echo "$current_action" >> "$PATTERN_CACHE/last_actions.tmp"
        mv "$PATTERN_CACHE/last_actions.tmp" "$PATTERN_CACHE/last_actions.txt"
    else
        mkdir -p "$PATTERN_CACHE"
        echo "$current_action" > "$PATTERN_CACHE/last_actions.txt"
    fi
    
    # Check for repeated sequences
    local sequence=$(tail -n 3 "$PATTERN_CACHE/last_actions.txt" | tr '\n' ' ')
    echo "$sequence"
}

# Generate insights from patterns
generate_insights() {
    local frequent_commands=$(jq -r '.frequency.command | to_entries | sort_by(.value) | reverse | .[0:3] | map(.key) | join(", ")' "$PATTERN_DB" 2>/dev/null || echo "none")
    local peak_hours=$(jq -r '.frequency.time_pattern | to_entries | sort_by(.value) | reverse | .[0:3] | map(.key) | join(", ")' "$PATTERN_DB" 2>/dev/null || echo "none")
    
    echo "PATTERN INSIGHTS:"
    echo "- Most used commands: $frequent_commands"
    echo "- Peak activity times: $peak_hours"
}

# Main execution
main() {
    local action="${1:-}"
    local context="${2:-general}"
    
    init_pattern_db
    
    if [[ -n "$action" ]]; then
        # Extract and store pattern
        local pattern=$(extract_patterns "$action" "$context")
        
        # Append to patterns array
        jq --argjson pattern "$pattern" '.patterns += [$pattern]' "$PATTERN_DB" > "${PATTERN_DB}.tmp" && \
            mv "${PATTERN_DB}.tmp" "$PATTERN_DB"
        
        # Update frequencies
        local cmd_pattern=$(echo "$pattern" | jq -r '.command // empty')
        local time_pattern=$(echo "$pattern" | jq -r '.time_pattern // empty')
        
        [[ -n "$cmd_pattern" ]] && update_frequency "command" "$cmd_pattern"
        [[ -n "$time_pattern" ]] && update_frequency "time_pattern" "$time_pattern"
        
        # Detect sequences
        local sequence=$(detect_sequence "$action")
        
        # Generate insights periodically (every 10 actions)
        local action_count=$(jq '.patterns | length' "$PATTERN_DB")
        if [[ $((action_count % 10)) -eq 0 ]]; then
            generate_insights
        fi
    fi
}

# Execute if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi