#!/usr/bin/env bash
# Energy-Aware Routing Hook for Solo-Claude v4
# Monitors energy levels and routes tasks accordingly

# Configuration
ENERGY_LOG="${HOME}/.claude/energy_patterns.log"
CURRENT_HOUR=$(date +"%H")
CURRENT_DAY=$(date +"%u")  # 1=Monday, 7=Sunday

# Energy level detection based on time patterns
get_energy_level() {
    local hour=$1
    local day=$2
    
    # Peak hours (9-11 AM, 2-4 PM)
    if [[ ($hour -ge 9 && $hour -lt 11) || ($hour -ge 14 && $hour -lt 16) ]]; then
        echo "high"
    # Medium hours (11 AM-2 PM, 4-6 PM)
    elif [[ ($hour -ge 11 && $hour -lt 14) || ($hour -ge 16 && $hour -lt 18) ]]; then
        echo "medium"
    # Low energy hours (early morning, evening)
    else
        echo "low"
    fi
}

# Task complexity assessment
assess_task_complexity() {
    local task_description="$1"
    
    # High complexity indicators
    if echo "$task_description" | grep -qiE "(architect|design|complex|integrate|refactor|debug)"; then
        echo "high"
    # Medium complexity indicators
    elif echo "$task_description" | grep -qiE "(implement|build|create|test|review)"; then
        echo "medium"
    # Low complexity indicators
    else
        echo "low"
    fi
}

# Route task based on energy and complexity
route_task() {
    local energy_level="$1"
    local task_complexity="$2"
    
    # High energy + High complexity = Perfect match
    if [[ "$energy_level" == "high" && "$task_complexity" == "high" ]]; then
        echo "PROCEED: Optimal energy-task alignment for complex work"
        return 0
    # Low energy + High complexity = Defer
    elif [[ "$energy_level" == "low" && "$task_complexity" == "high" ]]; then
        echo "DEFER: Complex task requires higher energy. Consider scheduling for peak hours."
        return 1
    # Low energy + Low complexity = Good match
    elif [[ "$energy_level" == "low" && "$task_complexity" == "low" ]]; then
        echo "PROCEED: Good match for current energy level"
        return 0
    else
        echo "PROCEED: Energy-task alignment acceptable"
        return 0
    fi
}

# Main execution
main() {
    local task_description="${1:-}"
    
    if [[ -z "$task_description" ]]; then
        echo "No task description provided"
        exit 0
    fi
    
    ENERGY_LEVEL=$(get_energy_level "$CURRENT_HOUR" "$CURRENT_DAY")
    TASK_COMPLEXITY=$(assess_task_complexity "$task_description")
    
    # Log pattern
    echo "$(date +"%Y-%m-%d %H:%M:%S") | Energy: $ENERGY_LEVEL | Complexity: $TASK_COMPLEXITY | Task: $task_description" >> "$ENERGY_LOG"
    
    # Route and provide recommendation
    ROUTING_RESULT=$(route_task "$ENERGY_LEVEL" "$TASK_COMPLEXITY")
    echo "$ROUTING_RESULT"
    
    # Export for use in Claude
    export CLAUDE_ENERGY_LEVEL="$ENERGY_LEVEL"
    export CLAUDE_TASK_COMPLEXITY="$TASK_COMPLEXITY"
}

# Execute if called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi